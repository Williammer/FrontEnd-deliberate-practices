{"version":3,"sources":["../static/js/16.c4c0008e.chunk.js","features/githubUserList/fetchUserReposEpic.test.js"],"names":["webpackJsonp","220","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_rxjs__","__WEBPACK_IMPORTED_MODULE_1__fetchUserReposEpic__","it","done","mockResponse","data","name","license","action$","type","username","dependencies","fetch","url","Promise","resolve","subscribe","actions","expect","toEqual","repos","mockErrorObject","message","reject","action","error"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAAqBC,GAE7C,YACAC,QAAOC,eAAeH,EAAqB,cAAgBI,OAAO,GAC7C,IAAIC,GAAqCJ,EAAoB,IACzDK,EAAoDL,EAAoB,GCLjGM,IAAG,kDAAmD,SAAAC,GACpD,GAAMC,IACJC,OAEIC,KAAM,QACNC,QAAS,QAGTD,KAAM,QACNC,QAAS,QAGTD,KAAM,mBACNC,QAAS,SAITC,EAAUX,OAAAG,EAAA,IAAKS,KAAM,cAAeC,SAAU,YAE9CC,GACJC,MAAO,SAAAC,GAAA,MAAOC,SAAQC,QAAQX,IAEhBP,QAAAI,EAAA,SAAmBO,EAJpB,KAIqCG,GAE5CK,UACN,SAAAC,GACEC,OAAOD,GAASE,SACdV,KAAM,eACNW,OAAQ,QAAS,QAAS,uBAG9BjB,EACAA,KAIJD,GAAG,gEAAiE,SAAAC,GAClE,GAAMkB,IAAoBC,QAAS,cAC7Bd,EAAUX,OAAAG,EAAA,IAAKS,KAAM,cAAeC,SAAU,YAE9CC,GACJC,MAAO,SAAAC,GAAA,MAAOC,SAAQS,OAAOF,IAEfxB,QAAAI,EAAA,SAAmBO,EAJpB,KAIqCG,GAE5CK,UACN,SAAAQ,GACEN,OAAOM,GAAQL,SACbV,KAAM,sBACNgB,MAAOJ,EAAgBC,WAG3BnB,EACAA","file":"static/js/16.c4c0008e.chunk.js","sourcesContent":["webpackJsonp([16],{\n\n/***/ 220:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fetchUserReposEpic__ = __webpack_require__(78);\nit('should fetch and return the update repos action',function(done){var mockResponse={data:[{name:'react',license:'MIT'},{name:'redux',license:'MIT'},{name:'redux-observable',license:'MIT'}]};var action$=Object(__WEBPACK_IMPORTED_MODULE_0_rxjs__[\"e\" /* of */])({type:'FETCH_REPOS',username:'william'});var state$=null;// not needed for this epic\nvar dependencies={fetch:function fetch(url){return Promise.resolve(mockResponse);}};var result$=Object(__WEBPACK_IMPORTED_MODULE_1__fetchUserReposEpic__[\"default\"])(action$,state$,dependencies);result$.subscribe(function(actions){expect(actions).toEqual({type:'UPDATE_REPOS',repos:['react','redux','redux-observable']});},done,done);});it('should return the fetch repos failure action if has exception',function(done){var mockErrorObject={message:'Not Found!'};var action$=Object(__WEBPACK_IMPORTED_MODULE_0_rxjs__[\"e\" /* of */])({type:'FETCH_REPOS',username:'william'});var state$=null;// not needed for this epic\nvar dependencies={fetch:function fetch(url){return Promise.reject(mockErrorObject);}};var result$=Object(__WEBPACK_IMPORTED_MODULE_1__fetchUserReposEpic__[\"default\"])(action$,state$,dependencies);result$.subscribe(function(action){expect(action).toEqual({type:'FETCH_REPOS_FAILURE',error:mockErrorObject.message});},done,done);});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/16.c4c0008e.chunk.js","import { of } from 'rxjs';\nimport fetchUserReposEpic from './fetchUserReposEpic';\n\nit('should fetch and return the update repos action', done => {\n  const mockResponse = {\n    data: [\n      {\n        name: 'react',\n        license: 'MIT',\n      },\n      {\n        name: 'redux',\n        license: 'MIT',\n      },\n      {\n        name: 'redux-observable',\n        license: 'MIT',\n      },\n    ],\n  };\n  const action$ = of({ type: 'FETCH_REPOS', username: 'william' });\n  const state$ = null; // not needed for this epic\n  const dependencies = {\n    fetch: url => Promise.resolve(mockResponse),\n  };\n  const result$ = fetchUserReposEpic(action$, state$, dependencies);\n\n  result$.subscribe(\n    actions => {\n      expect(actions).toEqual({\n        type: 'UPDATE_REPOS',\n        repos: ['react', 'redux', 'redux-observable'],\n      });\n    },\n    done,\n    done,\n  );\n});\n\nit('should return the fetch repos failure action if has exception', done => {\n  const mockErrorObject = { message: 'Not Found!' };\n  const action$ = of({ type: 'FETCH_REPOS', username: 'william' });\n  const state$ = null; // not needed for this epic\n  const dependencies = {\n    fetch: url => Promise.reject(mockErrorObject),\n  };\n  const result$ = fetchUserReposEpic(action$, state$, dependencies);\n\n  result$.subscribe(\n    action => {\n      expect(action).toEqual({\n        type: 'FETCH_REPOS_FAILURE',\n        error: mockErrorObject.message,\n      });\n    },\n    done,\n    done,\n  );\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/features/githubUserList/fetchUserReposEpic.test.js"],"sourceRoot":""}