{"version":3,"sources":["features/githubUserList/fetchUserReposEpic.test.js"],"names":["__webpack_require__","r","__webpack_exports__","rxjs__WEBPACK_IMPORTED_MODULE_0__","_fetchUserReposEpic__WEBPACK_IMPORTED_MODULE_1__","it","done","mockResponse","data","name","license","action$","of","type","username","dependencies","fetch","url","Promise","resolve","fetchUserReposEpic","subscribe","actions","expect","toEqual","repos","mockErrorObject","message","reject","action","error"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAA,IAGAK,GAAG,kDAAmD,SAAAC,GACpD,IAAMC,EAAe,CACnBC,KAAM,CACJ,CACEC,KAAM,QACNC,QAAS,OAEX,CACED,KAAM,QACNC,QAAS,OAEX,CACED,KAAM,mBACNC,QAAS,SAITC,EAAUC,YAAG,CAAEC,KAAM,cAAeC,SAAU,YAE9CC,EAAe,CACnBC,MAAO,SAAAC,GAAG,OAAIC,QAAQC,QAAQZ,KAEhBa,kBAAmBT,EAJpB,KAIqCI,GAE5CM,UACN,SAAAC,GACEC,OAAOD,GAASE,QAAQ,CACtBX,KAAM,eACNY,MAAO,CAAC,QAAS,QAAS,uBAG9BnB,EACAA,KAIJD,GAAG,gEAAiE,SAAAC,GAClE,IAAMoB,EAAkB,CAAEC,QAAS,cAC7BhB,EAAUC,YAAG,CAAEC,KAAM,cAAeC,SAAU,YAE9CC,EAAe,CACnBC,MAAO,SAAAC,GAAG,OAAIC,QAAQU,OAAOF,KAEfN,kBAAmBT,EAJpB,KAIqCI,GAE5CM,UACN,SAAAQ,GACEN,OAAOM,GAAQL,QAAQ,CACrBX,KAAM,sBACNiB,MAAOJ,EAAgBC,WAG3BrB,EACAA","file":"static/js/9.55c12c2f.chunk.js","sourcesContent":["import { of } from 'rxjs';\nimport fetchUserReposEpic from './fetchUserReposEpic';\n\nit('should fetch and return the update repos action', done => {\n  const mockResponse = {\n    data: [\n      {\n        name: 'react',\n        license: 'MIT',\n      },\n      {\n        name: 'redux',\n        license: 'MIT',\n      },\n      {\n        name: 'redux-observable',\n        license: 'MIT',\n      },\n    ],\n  };\n  const action$ = of({ type: 'FETCH_REPOS', username: 'william' });\n  const state$ = null; // not needed for this epic\n  const dependencies = {\n    fetch: url => Promise.resolve(mockResponse),\n  };\n  const result$ = fetchUserReposEpic(action$, state$, dependencies);\n\n  result$.subscribe(\n    actions => {\n      expect(actions).toEqual({\n        type: 'UPDATE_REPOS',\n        repos: ['react', 'redux', 'redux-observable'],\n      });\n    },\n    done,\n    done,\n  );\n});\n\nit('should return the fetch repos failure action if has exception', done => {\n  const mockErrorObject = { message: 'Not Found!' };\n  const action$ = of({ type: 'FETCH_REPOS', username: 'william' });\n  const state$ = null; // not needed for this epic\n  const dependencies = {\n    fetch: url => Promise.reject(mockErrorObject),\n  };\n  const result$ = fetchUserReposEpic(action$, state$, dependencies);\n\n  result$.subscribe(\n    action => {\n      expect(action).toEqual({\n        type: 'FETCH_REPOS_FAILURE',\n        error: mockErrorObject.message,\n      });\n    },\n    done,\n    done,\n  );\n});\n"],"sourceRoot":""}